[
  {
    "conceptId": "react-native",
    "arrayId": "array-react-native-intro",
    "posts": [
      {
        "id": "1",
        "title": "O que é React Native?",
        "content1": "React Native é um framework de código aberto desenvolvido pelo Facebook para criar aplicativos móveis nativos usando JavaScript e React. Ele permite que desenvolvedores construam aplicativos móveis que podem ser executados tanto em iOS quanto em Android usando uma única base de código.",
        "content2": "Diferente de outras soluções híbridas, o React Native compila o código JavaScript para componentes nativos reais, resultando em aplicativos com performance próxima aos desenvolvidos nativamente. Isso é possível graças à ponte (bridge) que o React Native estabelece entre o código JavaScript e os componentes nativos de cada plataforma.",
        "content3": "O React Native oferece uma experiência de desenvolvimento familiar para quem já conhece React, permitindo o uso de componentes, estado e props. Além disso, ele fornece acesso a APIs nativas através de módulos JavaScript, permitindo que você acesse recursos como câmera, GPS e notificações push.",
        "code": [
          {
            "description": "Exemplo 1: Componente básico em React Native",
            "javascript": "import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Bem-vindo ao React Native!</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  text: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n});"
          },
          {
            "description": "Exemplo 2: Componente com estado e eventos",
            "javascript": "import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet } from 'react-native';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Contador: {count}</Text>\n      <TouchableOpacity\n        style={styles.button}\n        onPress={() => setCount(count + 1)}\n      >\n        <Text style={styles.buttonText}>Incrementar</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 24,\n    marginBottom: 20,\n  },\n  button: {\n    backgroundColor: '#007AFF',\n    padding: 15,\n    borderRadius: 5,\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 16,\n  },\n});"
          }
        ]
      }
    ]
  },
  {
    "conceptId": "installation",
    "arrayId": "array-react-native-installation",
    "posts": [
      {
        "id": "2",
        "title": "Instalação e Configuração do React Native",
        "content1": "Para começar a desenvolver com React Native, você precisa configurar seu ambiente de desenvolvimento. O processo envolve a instalação do Node.js, JDK (Java Development Kit), Android Studio (para desenvolvimento Android) e Xcode (para desenvolvimento iOS, apenas em macOS).",
        "content2": "O React Native CLI é a ferramenta principal para criar e gerenciar projetos. Você pode criar um novo projeto usando o comando 'npx react-native init NomeDoProjeto'. Alternativamente, o Expo CLI oferece uma maneira mais simples de começar, especialmente para iniciantes, com menos configuração necessária.",
        "content3": "Após a instalação, você pode executar seu aplicativo em um emulador ou dispositivo físico. Para Android, use 'npx react-native run-android', e para iOS, use 'npx react-native run-ios'. O Metro Bundler será iniciado automaticamente para compilar seu código JavaScript.",
        "code": [
          {
            "description": "Exemplo 1: Criando um novo projeto React Native",
            "javascript": "// Usando React Native CLI\nnpx react-native init MeuApp\n\n// Usando Expo CLI\nnpx create-expo-app MeuApp\n\n// Estrutura básica do projeto\nMeuApp/\n  ├── android/\n  ├── ios/\n  ├── node_modules/\n  ├── App.js\n  ├── package.json\n  └── index.js"
          },
          {
            "description": "Exemplo 2: Configuração do ambiente de desenvolvimento",
            "javascript": "// Verificando a instalação\nnpx react-native doctor\n\n// Instalando dependências\nnpm install\n\n// Executando o aplicativo\nnpx react-native run-android\nnpx react-native run-ios"
          }
        ]
      }
    ]
  },
  {
    "conceptId": "components",
    "arrayId": "array-react-native-components",
    "posts": [
      {
        "id": "3",
        "title": "Componentes Básicos do React Native",
        "content1": "O React Native fornece vários componentes básicos que são essenciais para construir interfaces de usuário móveis. Estes componentes são mapeados para componentes nativos em iOS e Android, garantindo uma aparência e comportamento consistentes em ambas as plataformas.",
        "content2": "Os componentes mais comuns incluem View (container), Text (texto), Image (imagens), TextInput (entrada de texto), TouchableOpacity (botões), ScrollView (rolagem), FlatList (listas), e muitos outros. Cada componente tem suas próprias props e estilos específicos.",
        "content3": "A estilização dos componentes é feita usando JavaScript, com um sistema similar ao CSS, mas com algumas diferenças importantes. Por exemplo, não há unidades como px ou em, e todos os valores são números que representam pixels densidade-independentes.",
        "code": [
          {
            "description": "Exemplo 1: Componentes básicos",
            "javascript": "import React from 'react';\nimport { View, Text, Image, TextInput, TouchableOpacity } from 'react-native';\n\nexport default function BasicComponents() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Título</Text>\n      <Image\n        source={{ uri: 'https://example.com/image.jpg' }}\n        style={styles.image}\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Digite algo...\"\n      />\n      <TouchableOpacity style={styles.button}>\n        <Text>Clique aqui</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}"
          },
          {
            "description": "Exemplo 2: Lista com FlatList",
            "javascript": "import React from 'react';\nimport { FlatList, Text, View } from 'react-native';\n\nexport default function ListExample() {\n  const data = [\n    { id: '1', title: 'Item 1' },\n    { id: '2', title: 'Item 2' },\n    { id: '3', title: 'Item 3' },\n  ];\n\n  return (\n    <FlatList\n      data={data}\n      keyExtractor={item => item.id}\n      renderItem={({ item }) => (\n        <View style={styles.item}>\n          <Text>{item.title}</Text>\n        </View>\n      )}\n    />\n  );\n}"
          }
        ]
      }
    ]
  },
  {
    "conceptId": "navigation",
    "arrayId": "array-react-native-navigation",
    "posts": [
      {
        "id": "4",
        "title": "Navegação no React Native",
        "content1": "A navegação é um aspecto crucial em aplicativos móveis, e o React Native oferece várias opções para implementar diferentes tipos de navegação. A biblioteca mais popular para navegação é o React Navigation, que fornece uma solução completa e flexível para navegação em aplicativos React Native.",
        "content2": "O React Navigation suporta diferentes tipos de navegação, incluindo navegação em pilha (Stack), navegação por abas (Tab), navegação por drawer (gaveta) e navegação por botões (Switch). Cada tipo de navegação é adequado para diferentes casos de uso e pode ser combinado para criar interfaces complexas.",
        "content3": "A navegação no React Native também inclui recursos como parâmetros de rota, eventos de navegação, configuração de cabeçalhos e transições personalizadas. Além disso, o React Navigation oferece suporte a gestos nativos e animações fluidas.",
        "code": [
          {
            "description": "Exemplo 1: Configuração básica de navegação",
            "javascript": "import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator();\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={styles.container}>\n      <Text>Home Screen</Text>\n      <Button\n        title=\"Ir para Detalhes\"\n        onPress={() => navigation.navigate('Details')}\n      />\n    </View>\n  );\n}\n\nfunction DetailsScreen() {\n  return (\n    <View style={styles.container}>\n      <Text>Details Screen</Text>\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Details\" component={DetailsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}"
          },
          {
            "description": "Exemplo 2: Navegação por abas",
            "javascript": "import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nconst Tab = createBottomTabNavigator();\n\nfunction TabNavigator() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          tabBarIcon: ({ color, size }) => (\n            <Icon name=\"home\" size={size} color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Profile\"\n        component={ProfileScreen}\n        options={{\n          tabBarIcon: ({ color, size }) => (\n            <Icon name=\"person\" size={size} color={color} />\n          ),\n        }}\n      />\n    </Tab.Navigator>\n  );\n}"
          }
        ]
      }
    ]
  },
  {
    "conceptId": "state-management",
    "arrayId": "array-react-native-state",
    "posts": [
      {
        "id": "5",
        "title": "Gerenciamento de Estado no React Native",
        "content1": "O gerenciamento de estado é uma parte fundamental do desenvolvimento de aplicativos React Native. Embora o React forneça o useState e useContext para gerenciamento de estado local, aplicativos maiores geralmente precisam de soluções mais robustas para gerenciar estados globais e complexos.",
        "content2": "Existem várias bibliotecas populares para gerenciamento de estado no React Native, incluindo Redux, MobX, Recoil e Zustand. Cada uma tem suas próprias características e casos de uso ideais. Além disso, o Context API do React pode ser usado para casos mais simples de compartilhamento de estado.",
        "content3": "A escolha da solução de gerenciamento de estado depende de fatores como a complexidade do aplicativo, a necessidade de persistência de dados, a performance requerida e a preferência da equipe. É importante considerar também a integração com outras bibliotecas e ferramentas do ecossistema React Native.",
        "code": [
          {
            "description": "Exemplo 1: Usando Context API",
            "javascript": "import React, { createContext, useState, useContext } from 'react';\n\nconst ThemeContext = createContext();\n\nexport function ThemeProvider({ children }) {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nfunction useTheme() {\n  return useContext(ThemeContext);\n}\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <NavigationContainer>\n        {/* Seu app aqui */}\n      </NavigationContainer>\n    </ThemeProvider>\n  );\n}"
          },
          {
            "description": "Exemplo 2: Usando Redux Toolkit",
            "javascript": "import { createSlice, configureStore } from '@reduxjs/toolkit';\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0,\n  },\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n  },\n});\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n  },\n});\n\nfunction Counter() {\n  const count = useSelector(state => state.counter.value);\n  const dispatch = useDispatch();\n\n  return (\n    <View>\n      <Text>Count: {count}</Text>\n      <Button title=\"Increment\" onPress={() => dispatch(increment())} />\n      <Button title=\"Decrement\" onPress={() => dispatch(decrement())} />\n    </View>\n  );\n}"
          }
        ]
      }
    ]
  }
]
