[
  {
    "conceptId": "tailwind",
    "arrayId": "array-tailwind-intro",
    "posts": [
      {
        "id": "1",
        "title": "O que é Tailwind CSS?",
        "content1": "Tailwind CSS é um framework CSS utilitário que permite criar designs personalizados diretamente no HTML, sem precisar sair do seu arquivo de template. Diferente de frameworks CSS tradicionais como Bootstrap ou Material UI, o Tailwind não fornece componentes pré-construídos, mas sim classes utilitárias de baixo nível que podem ser compostas para criar qualquer design.",
        "content2": "A abordagem do Tailwind é baseada em classes utilitárias, o que significa que você aplica estilos diretamente no HTML usando classes como `flex`, `pt-4`, `text-center` e `hover:bg-gray-100`. Isso elimina a necessidade de escrever CSS personalizado na maioria dos casos, tornando o desenvolvimento mais rápido e consistente.",
        "content3": "O Tailwind é altamente personalizável através do arquivo de configuração `tailwind.config.js`, onde você pode definir suas próprias cores, fontes, espaçamentos e outros valores. Além disso, o framework inclui recursos como modo escuro, design responsivo e suporte a plugins, tornando-o uma ferramenta poderosa para desenvolvimento web moderno.",
        "code": [
          {
            "description": "Exemplo 1: Criando um card com Tailwind CSS",
            "javascript": "<div class=\"max-w-sm rounded overflow-hidden shadow-lg bg-white\">\n  <img class=\"w-full\" src=\"image.jpg\" alt=\"Card image\">\n  <div class=\"px-6 py-4\">\n    <div class=\"font-bold text-xl mb-2\">Card Title</div>\n    <p class=\"text-gray-700 text-base\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n    </p>\n  </div>\n  <div class=\"px-6 pt-4 pb-2\">\n    <span class=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">#tag1</span>\n    <span class=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">#tag2</span>\n  </div>\n</div>"
          },
          {
            "description": "Exemplo 2: Layout responsivo com Flexbox",
            "javascript": "<div class=\"flex flex-col md:flex-row\">\n  <div class=\"w-full md:w-1/2 p-4 bg-blue-500\">\n    <h2 class=\"text-white text-2xl font-bold\">Coluna 1</h2>\n    <p class=\"text-white\">Conteúdo da primeira coluna</p>\n  </div>\n  <div class=\"w-full md:w-1/2 p-4 bg-green-500\">\n    <h2 class=\"text-white text-2xl font-bold\">Coluna 2</h2>\n    <p class=\"text-white\">Conteúdo da segunda coluna</p>\n  </div>\n</div>"
          }
        ]
      }
    ]
  },
  {
    "conceptId": "utility-first",
    "arrayId": "array-tailwind-utility",
    "posts": [
      {
        "id": "2",
        "title": "Abordagem Utility-First",
        "content1": "A abordagem utility-first do Tailwind CSS é baseada na ideia de que você pode criar qualquer design combinando classes utilitárias de baixo nível. Em vez de criar classes CSS personalizadas para cada componente, você compõe o design diretamente no HTML usando classes predefinidas.",
        "content2": "Esta abordagem oferece várias vantagens: não há necessidade de nomear classes, não há especificidade CSS para gerenciar, e você pode ver exatamente quais estilos estão sendo aplicados a cada elemento. Além disso, o Tailwind gera apenas o CSS que você realmente usa, resultando em arquivos CSS menores em produção.",
        "content3": "Embora inicialmente possa parecer verboso, a abordagem utility-first torna o desenvolvimento mais rápido e consistente. Você pode criar componentes reutilizáveis usando frameworks como React ou Vue.js, ou extrair classes comuns usando a diretiva @apply do Tailwind.",
        "code": [
          {
            "description": "Exemplo 1: Comparação entre CSS tradicional e Tailwind",
            "javascript": "/* CSS Tradicional */\n.button {\n  padding: 0.5rem 1rem;\n  background-color: #3b82f6;\n  color: white;\n  border-radius: 0.25rem;\n  font-weight: 500;\n}\n\n/* Tailwind CSS */\n<button class=\"px-4 py-2 bg-blue-500 text-white rounded font-medium\">\n  Click me\n</button>"
          },
          {
            "description": "Exemplo 2: Usando @apply para extrair classes comuns",
            "javascript": "/* No seu arquivo CSS */\n.btn-primary {\n  @apply px-4 py-2 bg-blue-500 text-white rounded font-medium hover:bg-blue-600;\n}\n\n/* No seu HTML */\n<button class=\"btn-primary\">\n  Click me\n</button>"
          }
        ]
      }
    ]
  }
]
